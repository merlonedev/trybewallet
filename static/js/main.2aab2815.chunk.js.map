{"version":3,"sources":["images/trybe-logo.png","actions/index.js","pages/Login.js","components/Header.jsx","components/ExpensesForm.jsx","components/ExpensesTable.jsx","components/EditForm.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/wallet.js","reducers/user.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","getCurrencies","dispatch","a","type","fetch","currencies","json","currenciesObj","payload","Login","props","state","email","password","redirect","handleChange","bind","authenticator","handleClick","this","loginDispatch","setState","target","name","value","authDispatch","emailReg","test","length","canAuthenticate","to","className","src","trybe","alt","htmlFor","data-testid","id","onChange","onClick","disabled","React","Component","connect","user","isAuth","Header","redirectHome","sumTotal","expenses","soma","forEach","currency","exchangeRates","ask","Intl","NumberFormat","style","format","defaultProps","undefined","wallet","total","INITIAL_STATE","description","method","tag","ExpensesForm","renderSelects","handleSubmit","fetcher","e","preventDefault","addExpense","currencieNames","onSubmit","filter","item","map","crcy","i","key","expense","addExpenseAction","heads","ExpensesTable","formatCurrency","renderButtons","removeExpense","selectExpenseAct","head","split","Number","toFixed","EditForm","selectedExpense","edit","selected","editExpense","Wallet","status","App","path","component","exact","Boolean","window","location","hostname","match","loading","action","Object","keys","exp","sort","b","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aab2815.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trybe-logo.8b07e0b0.png\";","// Coloque aqui suas actions\n// export const actiontest = createAction('BLABLA');\nexport const CAN_AUTHENTICATE = 'CAN_AUTHENTICATE';\nexport const authAction = (payload) => ({\n  type: CAN_AUTHENTICATE,\n  payload,\n});\n\nexport const LOGIN_ACTION = 'LOGIN_ACTION';\nexport const loginAction = (payload) => ({\n  type: LOGIN_ACTION,\n  payload,\n});\n\nexport const REQUEST_ACTION = 'REQUEST_CURRENCIES';\nexport const requestAction = () => ({\n  type: REQUEST_ACTION,\n});\n\nexport const RECEIVE_ACTION = 'RECEIVE_REQUEST';\nexport const receiveAction = (payload) => ({\n  type: RECEIVE_ACTION,\n  payload,\n});\n\nexport function getCurrencies() {\n  const API_URL = 'https://economia.awesomeapi.com.br/json/all';\n  return async (dispatch) => {\n    dispatch(requestAction());\n    const currencies = await fetch(API_URL);\n    const currenciesObj = await currencies.json();\n    dispatch(receiveAction(currenciesObj));\n  };\n}\n\nexport const ADD_EXPENSE_ACTION = 'ADD_EXPENSE_ACTION';\nexport const addExpenseAction = (expense, id) => ({\n  type: ADD_EXPENSE_ACTION,\n  payload: {\n    expense, id,\n  },\n});\n\nexport const REMOVE_EXPENSE_ACTION = 'REMOVE_EXPENSE_ACTION';\nexport const removeExpenseAction = (payload) => ({\n  type: REMOVE_EXPENSE_ACTION,\n  payload,\n});\n\nexport const SELECT_EXPENSE = 'SELECT_EXPENSE';\nexport const selectExpense = (payload) => ({\n  type: SELECT_EXPENSE,\n  payload,\n});\n\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const editExpense = (expense, id) => ({\n  type: EDIT_EXPENSE,\n  payload: {\n    id,\n    expense,\n  },\n});\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { authAction, loginAction } from '../actions';\nimport trybe from '../images/trybe-logo.png';\n// - A rota para esta página deve ser \"/\"\n// - Existe um local para que o usuário insira seu email e senha\n// - Existe um botão com o texto \"Entrar\"\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      redirect: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.authenticator = this.authenticator.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { email } = this.state;\n    const { loginDispatch } = this.props;\n    loginDispatch(email);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    }, () => this.authenticator());\n  }\n\n  async authenticator() {\n    const { email, password } = this.state;\n    const { authDispatch } = this.props;\n    const emailReg = /^[a-z0-9_.]+@[a-z0-9]+\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/;\n    const MIN_LEN = 6;\n    await authDispatch(emailReg.test(email) && password.length >= MIN_LEN);\n  }\n\n  render() {\n    const { email, password, redirect } = this.state;\n    const { canAuthenticate } = this.props;\n    if (redirect) return <Redirect to=\"/carteira\" />;\n    return (\n      <div className=\"login\">\n        <div className=\"logo-div\">\n          <div className=\"logo\">\n            <img src={ trybe } alt=\"trybe logo\" className=\"trybe\" />\n            <h1 className=\"wallet\">wallet</h1>\n          </div>\n        </div>\n        <form className=\"forms-div\">\n          <h2>Login</h2>\n          <label htmlFor=\"email-input\" className=\"form-label\">\n            Email\n            <input\n              data-testid=\"email-input\"\n              type=\"email\"\n              name=\"email\"\n              className=\"form-control\"\n              id=\"email-input\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"password-input\" className=\"form-label\">\n            Senha\n            <input\n              data-testid=\"password-input\"\n              type=\"password\"\n              name=\"password\"\n              id=\"password-input\"\n              className=\"form-control\"\n              value={ password }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={ this.handleClick }\n            disabled={ !canAuthenticate }\n          >\n            ENTRAR\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  canAuthenticate: user.canAuthenticate,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  authDispatch: (isAuth) => dispatch(authAction(isAuth)),\n  loginDispatch: (email) => dispatch(loginAction(email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  canAuthenticate: PropTypes.bool.isRequired,\n  authDispatch: PropTypes.func.isRequired,\n  loginDispatch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport trybe from '../images/trybe-logo.png';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      redirectHome: false,\n    };\n    this.sumTotal = this.sumTotal.bind(this);\n  }\n\n  sumTotal() {\n    const { expenses } = this.props;\n    let soma = 0;\n    expenses.forEach(({ value, currency, exchangeRates }) => {\n      soma += exchangeRates[currency].ask * value;\n    });\n\n    const formatter = new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    });\n\n    return formatter.format(soma);\n    // return soma.toFixed(2);\n  }\n\n  render() {\n    const { redirectHome } = this.state;\n    if (redirectHome) return <Redirect to=\"/\" />;\n    const { email, currency } = this.props;\n    return (\n      <header className=\"page-header\">\n        <div className=\"logo\">\n          <img src={ trybe } alt=\"trybe logo\" className=\"trybe\" />\n          <h1 className=\"wallet\">wallet</h1>\n        </div>\n        <div className=\"column\">\n          <span>Total: </span>\n          <span data-testid=\"total-field\">{ this.sumTotal() }</span>\n        </div>\n        <div className=\"column\">\n          <span>Moeda de conversão: </span>\n          <span data-testid=\"header-currency-field\">{ currency }</span>\n        </div>\n        <div className=\"email-div\">\n          <h4 data-testid=\"email-field\">{ email }</h4>\n          <button\n            type=\"button\"\n            onClick={ () => this.setState({ redirectHome: true }) }\n            className=\"btn btn-danger\"\n          >\n            <i className=\"fas fa-sign-out-alt\" />\n          </button>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.defaultProps = {\n  expenses: undefined,\n  currency: undefined,\n};\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  currency: PropTypes.string,\n  // total: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nconst mapStateToProps = ({ user, wallet }) => ({\n  email: user.email,\n  currency: wallet.currency,\n  total: wallet.total,\n  expenses: wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addExpenseAction, getCurrencies } from '../actions';\n\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: '',\n};\n\nclass ExpensesForm extends React.Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n    this.renderSelects = this.renderSelects.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetcher } = this.props;\n    fetcher();\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  handleSubmit(e) {\n    const { fetcher } = this.props;\n    fetcher();\n    e.preventDefault();\n    const { addExpense, id } = this.props;\n    addExpense(this.state, id);\n    this.setState(INITIAL_STATE);\n  }\n\n  renderSelects() {\n    const { method, tag } = this.state;\n    return (\n      <>\n        <label htmlFor=\"method-input\">\n          Método de pagamento\n          <select\n            name=\"method\"\n            id=\"method-input\"\n            value={ method }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag-input\">\n          Tag\n          <select\n            name=\"tag\"\n            id=\"tag-input\"\n            value={ tag }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          >\n            <option value=\"\" disabled> </option>\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </>\n    );\n  }\n\n  render() {\n    const { currencieNames } = this.props;\n    const { value, description, currency } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"add expense-form\">\n        <label htmlFor=\"value-input\">\n          Valor\n          <input\n            type=\"number\"\n            name=\"value\"\n            id=\"value-input\"\n            value={ value }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          />\n        </label>\n        <label htmlFor=\"desc-input\">\n          Descrição\n          <input\n            type=\"text\"\n            name=\"description\"\n            id=\"desc-input\"\n            value={ description }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          />\n        </label>\n        <label htmlFor=\"currency-input\">\n          Moeda\n          <select\n            name=\"currency\"\n            id=\"currency-input\"\n            value={ currency }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          >\n            {currencieNames && currencieNames\n              .filter((item) => item !== 'USDT')\n              .map((crcy, i) => (\n                <option key={ i }>{crcy}</option>\n              ))}\n          </select>\n        </label>\n        {this.renderSelects()}\n        <button type=\"submit\" className=\"btn btn-success\">Adicionar despesa</button>\n      </form>\n    );\n  }\n}\n\nExpensesForm.defaultProps = {\n  id: undefined,\n  currencieNames: undefined,\n};\n\nExpensesForm.propTypes = {\n  fetcher: PropTypes.func.isRequired,\n  currencieNames: PropTypes.arrayOf(PropTypes.string),\n  addExpense: PropTypes.func.isRequired,\n  id: PropTypes.number,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetcher: () => dispatch(getCurrencies()),\n  addExpense: (expense, id) => dispatch(addExpenseAction(expense, id)),\n});\n\nconst mapStateToProps = ({ wallet }) => ({\n  currencies: wallet.currencies,\n  currencieNames: wallet.currencieNames,\n  id: wallet.id,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpenseAction, selectExpense } from '../actions';\n\nconst heads = [\n  'Descrição', 'Tag', 'Método de pagamento',\n  'Valor', 'Moeda', 'Câmbio utilizado',\n  'Valor convertido', 'Moeda de conversão', 'Editar/Excluir',\n];\n\nclass ExpensesTable extends Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.formatCurrency = this.formatCurrency.bind(this);\n    this.renderButtons = this.renderButtons.bind(this);\n  }\n\n  handleClick(target, payload) {\n    const { removeExpense, selectExpenseAct } = this.props;\n    if (target.name === 'delete') {\n      removeExpense(payload);\n    }\n    if (target.name === 'edit') {\n      selectExpenseAct(payload);\n    }\n  }\n\n  formatCurrency(value, currency) {\n    const formatter = new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: `${currency}`,\n    });\n\n    return formatter.format(value);\n  }\n\n  renderButtons(expense, id) {\n    return (\n      <td className=\"table-buttons\">\n        <button\n          type=\"button\"\n          data-testid=\"edit-btn\"\n          name=\"edit\"\n          onClick={ ({ target }) => this.handleClick(target, expense) }\n          className=\"btn btn-warning\"\n        >\n          <span className=\"far fa-edit\" />\n        </button>\n        <button\n          type=\"button\"\n          name=\"delete\"\n          data-testid=\"delete-btn\"\n          onClick={ ({ target }) => this.handleClick(target, id) }\n          className=\"btn btn-danger\"\n        >\n          <span className=\"fas fa-backspace\" />\n        </button>\n      </td>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div className=\"wallet-table\">\n        <table>\n          <thead>\n            <tr>\n              {heads.map((head) => <th key={ head } className={ head }>{head}</th>)}\n            </tr>\n          </thead>\n          <tbody>\n\n            {expenses.map((expense) => {\n              const { id, currency, description,\n                tag, method, value, exchangeRates } = expense;\n              return (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>\n                    {this.formatCurrency(value, currency)}\n                  </td>\n                  <td>{(exchangeRates[currency].name).split('/')[0]}</td>\n                  <td>{Number(exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>\n                    {this.formatCurrency(\n                      Number(exchangeRates[currency].ask * value), 'BRL',\n                    )}\n                  </td>\n                  <td>Real</td>\n                  {this.renderButtons(expense, id)}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n  selectExpenseAct: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ wallet }) => ({\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (id) => dispatch(removeExpenseAction(id)),\n  selectExpenseAct: (expense) => dispatch(selectExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editExpense, getCurrencies } from '../actions';\n\nclass EditForm extends Component {\n  constructor(props) {\n    super(props);\n    const { selectedExpense: {\n      id, method, tag, value, description, currency,\n    } } = this.props;\n    this.state = {\n      id, method, tag, value, description, currency,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderSelects = this.renderSelects.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetcher } = this.props;\n    fetcher();\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  handleSubmit(e) {\n    const { id } = this.state;\n    e.preventDefault();\n    const { edit } = this.props;\n    edit(this.state, id);\n  }\n\n  renderSelects() {\n    const { method, tag } = this.state;\n    return (\n      <>\n        <label htmlFor=\"method-input\">\n          Método de pagamento\n          <select\n            name=\"method\"\n            id=\"method-input\"\n            value={ method }\n            data-testid=\"method-input\"\n            className=\"form-control\"\n            onChange={ this.handleChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag-input\">\n          Tag\n          <select\n            name=\"tag\"\n            id=\"tag-input\"\n            data-testid=\"tag-input\"\n            value={ tag }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          >\n            <option value=\"\" disabled> </option>\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </>\n    );\n  }\n\n  render() {\n    const { currencieNames } = this.props;\n    const { value, description, currency } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"edit expense-form\">\n        <label htmlFor=\"value-input\">\n          Valor\n          <input\n            type=\"number\"\n            data-testid=\"value-input\"\n            name=\"value\"\n            id=\"value-input\"\n            value={ value }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          />\n        </label>\n        <label htmlFor=\"desc-input\">\n          Descrição\n          <input\n            type=\"text\"\n            name=\"description\"\n            id=\"desc-input\"\n            data-testid=\"description-input\"\n            value={ description }\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          />\n        </label>\n        <label htmlFor=\"currency-input\">\n          Moeda\n          <select\n            name=\"currency\"\n            id=\"currency-input\"\n            value={ currency }\n            data-testid=\"currency-input\"\n            onChange={ this.handleChange }\n            className=\"form-control\"\n          >\n            {currencieNames && currencieNames.filter((item) => item !== 'USDT')\n              .map((crcy, i) => (\n                <option key={ i }>{crcy}</option>\n              ))}\n          </select>\n        </label>\n        {this.renderSelects()}\n        <button type=\"submit\" className=\"btn btn-warning\">Editar despesa</button>\n      </form>\n    );\n  }\n}\n\nEditForm.defaultProps = {\n  currencieNames: undefined,\n};\n\nEditForm.propTypes = {\n  selectedExpense: PropTypes.shape({\n    value: PropTypes.number,\n    description: PropTypes.string,\n    method: PropTypes.string,\n    currency: PropTypes.string,\n    tag: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n  fetcher: PropTypes.func.isRequired,\n  currencieNames: PropTypes.arrayOf(PropTypes.string),\n  edit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ wallet }) => ({\n  selectedExpense: wallet.selected,\n  currencieNames: wallet.currencieNames,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetcher: () => dispatch(getCurrencies()),\n  edit: (expense, id) => dispatch(editExpense(expense, id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport ExpensesForm from '../components/ExpensesForm';\nimport ExpensesTable from '../components/ExpensesTable';\nimport EditForm from '../components/EditForm';\n\nclass Wallet extends React.Component {\n  render() {\n    const { status } = this.props;\n    return (\n      <div>\n        <Header />\n        {status === 'add' && <ExpensesForm />}\n        {status === 'edit' && <EditForm />}\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  status: wallet.status,\n});\n\nWallet.defaultProps = ({\n  status: undefined,\n});\n\nWallet.propTypes = ({\n  status: PropTypes.string,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <main>\n      <Switch>\n        <Route path=\"/carteira\" component={ Wallet } />\n        <Route exact path=\"/\" component={ Login } />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  REQUEST_ACTION,\n  RECEIVE_ACTION,\n  ADD_EXPENSE_ACTION,\n  REMOVE_EXPENSE_ACTION,\n  SELECT_EXPENSE,\n  EDIT_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  id: 0,\n  currencies: [],\n  currencieNames: [],\n  expenses: [],\n  currency: 'BRL',\n  loading: false,\n  selected: null,\n  status: 'add',\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_ACTION:\n    return ({\n      ...state,\n      loading: true,\n    });\n  case RECEIVE_ACTION:\n    return ({\n      ...state,\n      currencieNames: Object.keys(action.payload),\n      currencies: action.payload,\n      loading: false,\n    });\n  case ADD_EXPENSE_ACTION:\n    return ({\n      ...state,\n      id: state.id + 1,\n      expenses: [...state.expenses,\n        { id: action.payload.id,\n          ...action.payload.expense,\n          exchangeRates: state.currencies,\n        }],\n    });\n  case REMOVE_EXPENSE_ACTION:\n    return ({\n      ...state,\n      expenses: state.expenses.filter((exp) => exp.id !== action.payload),\n    });\n  case SELECT_EXPENSE:\n    return ({\n      ...state,\n      selected: action.payload,\n      status: 'edit',\n    });\n  case EDIT_EXPENSE: {\n    return ({\n      ...state,\n      selected: null,\n      status: 'add',\n      expenses: [...state.expenses\n        .filter((exp) => exp.id !== action.payload.id), { id: action.payload.id,\n        ...action.payload.expense,\n        exchangeRates: state.currencies }].sort((a, b) => a.id - b.id),\n    });\n  }\n  default:\n    return state;\n  }\n};\n\n// const wallet = createReducer(INITIAL_STATE, (builder) => {\n//   builder.addCase(REQUEST_ACTION, (state) => ({\n//     ...state,\n//     loading: true,\n//   }));\n//   builder.addCase(RECEIVE_ACTION, (state, action) => ({\n//     ...state,\n//     currencieNames: Object.keys(action.payload),\n//     currencies: action.payload,\n//     loading: false,\n//   }));\n//   builder.addCase(ADD_EXPENSE_ACTION, (state, action) => ({\n//     ...state,\n//     id: state.id + 1,\n//     expenses: [...state.expenses,\n//       { id: action.payload.id,\n//         ...action.payload.expense,\n//         exchangeRates: state.currencies,\n//       }],\n//   }));\n//   builder.addCase(REMOVE_EXPENSE_ACTION, (state, action) => {\n//     const newExpenses = [];\n//     for (let i = 0; i < state.expenses.length; i += 1) {\n//       if (state.expenses[i].id !== action.payload) {\n//         newExpenses.push(state.expenses[i]);\n//       }\n//     }\n//     return ({\n//       ...state,\n//       expenses: newExpenses,\n//     });\n//   });\n//   builder.addDefaultCase((state) => state);\n// });\n\nexport default wallet;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { CAN_AUTHENTICATE, LOGIN_ACTION } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  canAuthenticate: false,\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case CAN_AUTHENTICATE:\n    return ({\n      ...state,\n      canAuthenticate: action.payload,\n    });\n  case LOGIN_ACTION:\n    return ({\n      ...state,\n      email: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { combineReducers } from 'redux';\nimport wallet from './wallet';\nimport user from './user';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './styles/main.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}